macro(set_conan_params)
    set(CONAN_PARAMS "-s compiler=")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        execute_process(COMMAND conan profile show default OUTPUT_VARIABLE CONAN_PROFILE)
        string(FIND ${CONAN_PROFILE} "compiler=gcc" IS_DEFAULT)
        if (IS_DEFAULT EQUAL -1)
            string(APPEND CONAN_PARAMS "gcc -s compiler.version=")
            set(GCC_VERSION ${CMAKE_CXX_COMPILER_VERSION})
            string(SUBSTRING ${GCC_VERSION} 0 3 GCC_VERSION)
            string(SUBSTRING ${GCC_VERSION} 2 1 SECOND_VERSION_NUMBER)
            if (${SECOND_VERSION_NUMBER} STREQUAL "0")
                string(SUBSTRING ${GCC_VERSION} 0 1 GCC_VERSION)
            endif()
            string(APPEND CONAN_PARAMS ${GCC_VERSION})
            # seems like in apple you already have libc++ by default
            # and in linux (MinGW Windows) libstdc++11
            if (APPLE)
                # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
                string(APPEND CONAN_PARAMS " -s compiler.libcxx=libc++")
            else()
                # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++11")
                string(APPEND CONAN_PARAMS " -s compiler.libcxx=libstdc++11")            
            endif()
            
            # we must assume one of two: compiler in path
            # or somebody not specifyed cxx compiler without c
            # compiler. I chosed second variant.
            
            # string(APPEND CONAN_PARAMS " -e CXX=g++ -e CC=gcc")

            string(APPEND CONAN_PARAMS " -e CXX=")
            string(APPEND CONAN_PARAMS ${CMAKE_CXX_COMPILER})
            string(APPEND CONAN_PARAMS " -e CC=")
            string(APPEND CONAN_PARAMS ${CMAKE_C_COMPILER})
        else()
            set(CONAN_PARAMS "")
        endif()
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        message("MSVC Triggered")
        execute_process(COMMAND conan profile show default OUTPUT_VARIABLE CONAN_PROFILE)
        string(FIND ${CONAN_PROFILE} "compiler=Visual Studio" IS_DEFAULT)
        if (IS_DEFAULT EQUAL -1)
            string(APPEND CONAN_PARAMS "\"Visual Studio\" -s compiler.version=")
            # NC Means not conan because conan uses MSVC_VERSION
            # it is not conan var, but cmake, but it is not matter
            set(MSVC_VERSION_NC ${CMAKE_CXX_COMPILER_VERSION})
            string(SUBSTRING ${MSVC_VERSION_NC} 0 4 MSVC_VERSION_NC)
            if (${MSVC_VERSION_NC} STREQUAL "19.2")
                set(MSVC_VERSION_NC "16")
            elseif(${MSVC_VERSION_NC} STREQUAL "19.1")
                set(MSVC_VERSION_NC "15")
            else()
                string(SUBSTRING MSVC_VERSION_NC 0 2 MSVC_VERSION_NC)
                if (${MSVC_VERSION_NC} STREQUAL "19")
                    set(MSVC_VERSION_NC "14")
                elseif (${MSVC_VERSION_NC} STREQUAL "18")
                    set(MSVC_VERSION_NC "12")
                elseif (${MSVC_VERSION_NC} STREQUAL "17")
                    set(MSVC_VERSION_NC "11")
                endif()
            endif()
            string(APPEND CONAN_PARAMS ${MSVC_VERSION_NC})
            # maybe need runtime
            
            # I can even not choose enything becouse 
            # for c and c++ visual studio uses same compiler
            string(APPEND CONAN_PARAMS " -e CXX=")
            string(APPEND CONAN_PARAMS "\"${CMAKE_CXX_COMPILER}\"")
            string(APPEND CONAN_PARAMS " -e CC=")
            string(APPEND CONAN_PARAMS "\"${CMAKE_CXX_COMPILER}\"")
        else()
            set(CONAN_PARAMS "")
        endif()        
       
    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        execute_process(COMMAND conan profile show default OUTPUT_VARIABLE CONAN_PROFILE)
        string(FIND ${CONAN_PROFILE} "compiler=apple-clang" IS_DEFAULT)
        if (IS_DEFAULT EQUAL -1)
            string(APPEND CONAN_PARAMS "apple-clang -s compiler.version=")
            set(APPLE_CLANG_VERSION ${CMAKE_CXX_COMPILER_VERSION})
            string(SUBSTRING ${APPLE_CLANG_VERSION} 0 3 APPLE_CLANG_VERSION)
            string(SUBSTRING ${APPLE_CLANG_VERSION} 2 1 SECOND_VERSION_NUMBER)
            string(APPEND CONAN_PARAMS ${APPLE_CLANG_VERSION})
            # not check libstd assuming that 
            # apple clang will be only in apple
            string(APPEND CONAN_PARAMS " -s compiler.libcxx=libc++")
            
            string(APPEND CONAN_PARAMS " -e CXX=")
            string(APPEND CONAN_PARAMS ${CMAKE_CXX_COMPILER})
            string(APPEND CONAN_PARAMS " -e CC=")
            string(APPEND CONAN_PARAMS ${CMAKE_C_COMPILER})
        else()
            set(CONAN_PARAMS "")
        endif()

    elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        execute_process(COMMAND conan profile show default OUTPUT_VARIABLE CONAN_PROFILE)
        string(FIND ${CONAN_PROFILE} "compiler=clang" IS_DEFAULT)
        if (IS_DEFAULT EQUAL -1)
            string(APPEND CONAN_PARAMS "clang -s compiler.version=")
            set(CLANG_VERSION ${CMAKE_CXX_COMPILER_VERSION})
            string(SUBSTRING ${CLANG_VERSION} 0 3 CLANG_VERSION)
            string(SUBSTRING ${CLANG_VERSION} 0 1 FIRST_VERSION_NUMBER)
            if (${FIRST_VERSION_NUMBER} STREQUAL "8" OR
                    ${FIRST_VERSION_NUMBER} STREQUAL "9" OR
                    ${FIRST_VERSION_NUMBER} STREQUAL "10")
                string(SUBSTRING ${CLANG_VERSION} 0 1 CLANG_VERSION)
            endif()
            string(APPEND CONAN_PARAMS ${CLANG_VERSION})
            if (APPLE)
                # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
                string(APPEND CONAN_PARAMS " -s compiler.libcxx=libc++")
            else()
                # set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libstdc++11")
                string(APPEND CONAN_PARAMS " -s compiler.libcxx=libstdc++11")
            endif()
            string(APPEND CONAN_PARAMS " -e CXX=")
            string(APPEND CONAN_PARAMS ${CMAKE_CXX_COMPILER})
            string(APPEND CONAN_PARAMS " -e CC=")
            string(APPEND CONAN_PARAMS ${CMAKE_C_COMPILER})
        else()
            set(CONAN_PARAMS "")
        endif()
    endif()
    set(CONAN_INSTALL_COMMAND "conan install --build=missing ")
    string(APPEND CONAN_INSTALL_COMMAND ${CONAN_PARAMS})
    string(APPEND CONAN_INSTALL_COMMAND " --install-folder=")
    string(APPEND CONAN_INSTALL_COMMAND ${CMAKE_BINARY_DIR})
    string(APPEND CONAN_INSTALL_COMMAND " ")
    string(APPEND CONAN_INSTALL_COMMAND ${CMAKE_SOURCE_DIR})

endmacro()

